from __future__ import division

import activations as act
import ipdb
import json
import gzip
import nn
import numpy as np
import metrics
import pandas as pd
import random as rnd
import subprocess
import utils as u

from itertools import product
from tqdm import tqdm


class KFoldCrossValidation(object):
    """
    This class represents a wrapper for the implementation of the classic
    k-fold cross validation algorithm, as described in Deep Learning pag.
    120.

    Attributes
    ----------
    dataset: numpy.ndarray
        the full dataset obtained by stiking the design matrix X with the
        target column vector y

    folds: list
        a list containing nfold chunks of the original dataset

    results: list
        a list containing the generalization assessment measures
        generated by every algorithm's iteration for each fold.

    fold_results: list
        a list of dictionaries; each dictionary contains the performances for
        a fold computed during one of the algorithm's iterations

    aggregated_results: dict
        a dictionary containing assessment values and aggregates for each
        metric

    """

    def __init__(self, X, y, neural_net, nfolds=3, shuffle=False, **kwargs):
        """
        The class' constructor.

        Parameters
        ----------
        X: numpy.ndarray
            the design matrix

        y: numpy.ndarray
            the target column vector

        neural_net: nn.NeuralNetwork
            the neural network that has to be cross validated

        nfolds: int
            the number of folds to be applied in the algorithm
            (Default value = 3)

        shuffle: bool
            choosing if the dataset must be shuffled
            (Default value = False)

        kwargs: dict
            a dictionary which contains the parameters for the neural
            network's initialization

        Returns
        -------
        """
        assert X.shape[0] == y.shape[0]

        self.dataset = np.hstack((X, y))
        self.folds = list()
        self.results = list()

        self.fold_errors = [[], []]
        self.accuracies = []
        self.f1_scores = []

        if shuffle:
            np.random.shuffle(self.dataset)

        self.set_folds(nfolds)
        self.validate(X, y, neural_net, nfolds, **kwargs)

    def set_folds(self, nfolds):
        """
        This function splits the dataset into nfolds folds.

        Parameters
        ----------
        nfolds: int
            the number of folds to be applied in the algorithm

        Returns
        -------
        """
        record_per_fold = int(self.dataset.shape[0] / nfolds)
        low = 0
        high = low + record_per_fold

        for i in np.arange(nfolds):
            self.folds.append(self.dataset[low:high] if i !=
                              nfolds - 1 else self.dataset[low:])

            low = high
            high += record_per_fold

    def validate(self, X, y, neural_net, nfolds, **kwargs):
        """
        This function implements the core of the k-fold cross validation
        algorithm. For each fold, the neural network is trained using the
        training set created for that fold, and is tested on the respective
        test set. Finally, the error between the test's target and the
        predicted one is collected.

        Parameters
        ----------
        X. numpy.ndarray
            the design matrix

        y: numpy.ndarray
            the target column vector

        neural_net: nn.NeuralNetwork
            the neural network that has to be cross validated

        nfolds: int
            the number of folds to be applied in the algorithm

        plot_curves: bool
            whether or not to plot the learning curve for each one of the
            cross validation's iterations

        kwargs: dict
            a dictionary which contains the parameters for the neural
            network's initialization

        Returns
        -------
        """
        W_initial, b_initial = neural_net.W, neural_net.b

        for i in tqdm(np.arange(nfolds),
                      desc='{}-FOLD CROSS VALIDATION PROGRESS'.format(nfolds)):

            train_set = np.vstack([self.folds[j] for j in np.arange(
                len(self.folds)) if j != i])

            X_train, y_train = np.hsplit(train_set, [X.shape[1]])
            X_va, y_va = np.hsplit(self.folds[i], [X.shape[1]])

            neural_net.train(X_train, y_train, X_va=X_va, y_va=y_va, **kwargs)

            self.fold_errors[0].\
                append(neural_net.optimizer.error_per_epochs[-1])
            self.fold_errors[1].\
                append(neural_net.optimizer.error_per_epochs_va[-1])

            if neural_net.task == 'classifier':
                self.accuracies.append(neural_net.optimizer.
                                       accuracy_per_epochs_va[-1])
                self.f1_scores.append(neural_net.optimizer.
                                      f1_score_per_epochs_va[-1])

            if kwargs['optimizer'] == 'SGD':
                neural_net.restore_weights()
            else:
                neural_net.W, neural_net.b = W_initial, b_initial

        self.aggregate_results(neural_net.optimizer.params)

    def aggregate_results(self, hyperparams):
        """
        Computes aggregation measures for each assessment metric.

        Parameters
        ----------

        Returns
        -------
        out : dict
            dictionary containing folds results and aggregates.
            out = {metric: {'mean': 0, 'std': 0, 'median': 0, 'values': []}}

        """
        self.fold_results = {"statistics":
                             {"values":
                              {"train": self.fold_errors[0],
                               "validation": self.fold_errors[1]},
                              "mean": np.mean(self.fold_errors[1]),
                              "std": np.std(self.fold_errors[1])
                              }
                             }

        if act.identity not in hyperparams['activation']:
            self.fold_results["accuracy_score"] = np.mean(self.accuracies)
            self.fold_results["f1_score"] = np.mean(self.f1_scores)

        acts = []

        for f in hyperparams['activation']:
            if f is act.sigmoid:
                acts.append('sigmoid')
            elif f is act.relu:
                acts.append('relu')
            elif f is act.tanh:
                acts.append('tanh')
            else:
                acts.append('identity')

        acts = ' -> '.join(acts)
        hyperparams['activation'] = acts
        hyperparams['topology'] = [str(s) for s in hyperparams['topology']]
        hyperparams['topology'] = ' -> '.join(hyperparams['topology'])

        self.fold_results["hyperparameters"] = hyperparams


class ModelSelectionCV(object):
    """
    Model selection using repeated Cross Validation.

    Attributes
    ----------
    grid: HyperGrid or HyperRandomGrid
        a grid of hyperparameters' configurations

    repetitions: int
        the number of times cross validation has to be repeted

    n_iter: int
        a placeholder for the current iteration

    fname: str
        the path to the file which contains the results for the
        hyperparameters' search phase
    """
    def __init__(self, grid, repetitions=1,
                 fname='../data/model_selection_results.json.gz'):
        """
        The class' constructor.

        Parameters
        ----------
        grid:
            a grid of hyperparameters

        repetitions: int
            cross validation repetitions
            (Default value = 1)

        Returns
        -------
        """
        if grid is not None:
            self.grid = grid
            self.repetitions = repetitions

        self.fname = fname

    def search(self, X_design, y_design, nfolds=3, ntrials=7,
               save_results=True, fname=None, **kwargs):
        """
        This function searches for the best hyperparamenters' configugation
        through a search space of hyperparameters.

        Parameters
        ----------
        X_design: numpy.ndarray
            the design matrix

        y_design: numpy.ndarray
            the column target vector

        nfolds: int
            the number of folds to be applied in the algorithm
            (Default value = 3)

        ntrials: int
            the number of times the search for the hyperparameters has to be
            repeated in order to have different network's initializations
            (Default value = 7)

        save_results: bool
            whether or not to save the results as a JSON file
            (Default value = True)

        fname: str
            where to save the results obtained at the end of the searching
            phase
            (Default value = '../data/model_selection_results.json.gz')

        Returns
        -------
        """
        self.n_iter = self.repetitions * len(self.grid)

        if fname is None:
            fname = self.fname

        if save_results:
            with gzip.open(fname, 'w') as f:
                f.write('{"results": [')

        i = 0

        dataset = np.hstack((X_design, y_design))
        np.random.shuffle(dataset)
        X_design, y_design = np.hsplit(dataset, [X_design.shape[1]])

        for hyperparams in tqdm(self.grid,
                                desc='GRID SEARCH {}'
                                .format(kwargs['par_name']
                                        if 'par_name' in kwargs else '')):
            # instanciate neural network
            i += 1

            if hyperparams['optimizer'] == 'SGD':
                hyperparams['momentum'] = {'type': hyperparams['type'],
                                           'alpha': hyperparams['alpha']
                                           }
                hyperparams.pop('type')
                hyperparams.pop('alpha')

            neural_net = nn.\
                NeuralNetwork(X_design, y_design,
                              hidden_sizes=hyperparams['hidden_sizes'],
                              activation=hyperparams['activation'],
                              task=hyperparams['task'])
            cross_val = KFoldCrossValidation(X_design, y_design,
                                             neural_net, nfolds=nfolds,
                                             **hyperparams)

            if save_results:
                with gzip.open(fname, 'a') as f:
                    json.dump(cross_val.fold_results, f, indent=4)
                    if i != self.n_iter:
                        f.write(',\n')
                    else:
                        f.write('\n ]}')

    def load_results(self, fname=None):
        """
        This function loads the JSON file which contains the results for
        every hyperparaments' configuration.

        Parameters
        ----------
        fname: str
            the path to the JSON file which contains the results
            (Default value = '../data/model_selection_results.json')

        Returns
        -------
        The file which contains the results.
        """
        if fname is None:
            fname = self.fname

        with gzip.open(fname, 'r') as f:
            data = json.load(f)

        return data

    def select_best_hyperparams(self, error='mse', top=5, fname=None):
        """
        Selection of the best hyperparameters

        Parameters
        ----------
        error: str
            error used
            (Default value = 'mse')

        metric: str
            the metric for evaluating the best hyperparameters' configuration
            (Default value = 'mean')

        top: int
            number of best hyperparameters
            (Default value = 1)

        Returns
        -------
        A list containing the values for the best hyperparameters'
        configuration
        """
        if fname is None:
            fname = self.fname
        data = self.load_results(fname=fname)

        best_mean_errors = np.argsort([res['statistics']['mean']
                                       for res in data['results']])[:top]
        best_mean_errors = [data['results'][i] for i in best_mean_errors]

        if error != 'mee':
            best_f1_scores = np.argsort(r['statistics']['f1_score']
                                        for r in best_mean_errors)[0]
            best_f1_scores = best_mean_errors[best_f1_scores]

        # subprocess.call(['rm', fname])

        return best_f1_scores if error != 'mee' else best_mean_errors[0]


class HyperGrid():
    """
    This class represents a wrapper for an iterator representing a grid of
    points in the hyperparameters' space.

    Attributes
    ----------
    size: int
        the grid's size, that is, the number of points composing the grid

    n: int
        the iterator's counter

    param_ranges: dict
        a dictionary containing ranges interval for each parameter

    types: dict
        a dictionary containing the type of each hyperparameter

    random: bool
        whether or not to initialize a random grid

    seed: int
        the random seed for the random grid's initialization
    """

    def __init__(self, param_ranges, size, random=True, seed=None):
        """
        HyperGrid instanciates a random or uniform grid using
        the given parameters ranges.

        The random grid iterator is reset after each use,
        allowing immediate reuse of the same grid.

        Parameters
        ----------
        param_ranges : dict
            dictionary containing ranges interval for each parameter.

        size: int
            size of the grid

        random: bool
            choose random grid or random grid
            (Default value = True)

        seed: int
            random seed initialization.

        Returns
        -------

        """
        self.size = size
        self.n = 0
        if type(param_ranges) is not dict:
            raise TypeError("Insert a dictionary of parameters ranges")
        self.param_ranges = param_ranges
        self.types = self.get_types()
        self.random = random

        if self.random:
            self.next = self.next_random
            if seed is not None:
                # seed inizialization
                self.seed = seed
                rnd.seed(self.seed)
            else:
                # random initialization
                rnd.seed()
                self.seed = rnd.randint(0, 2**32)
                rnd.seed(self.seed)

        else:
            self.next = self.next_uniform
            self.vec_size = size
            self.set_uniform_grid()

        # print('GENERATING AN HYPERPARAMETER GRID OF LENGTH {}'
        #       .format(self.__len__()))

    def get_types(self):
        """
        Get the type of each parameter

        Parameters
        ----------

        Returns
        -------
        types : dict
            dictionary containing each parameter type
        """

        types = dict()
        for par, interval in self.param_ranges.items():
            if (type(interval) is int) or \
               (type(interval) is float) or \
               (type(interval) is str) or \
               (type(interval) is bool) or \
               (interval is None):
                types[par] = 'constant'
            elif type(interval) is list:
                types[par] = list
            elif type(interval[0]) is int and type(interval[1] is int):
                types[par] = int
            elif type(interval[0]) is float and type(interval[1] is float):
                types[par] = float
            else:
                raise TypeError('Check interval type')
        return types

    def __iter__(self):
        return self

    def next_random(self):
        """
        Iterator's next method, returns the next grid record.

        Parameters
        ----------

        Returns
        -------
        x_grid : dict
            Randomized parameter dictionary
        """
        if self.n == 0:
            rnd.seed(self.seed)

        x_grid = dict()
        for par, interval in self.param_ranges.items():
            if self.types[par] is int:
                x_grid[par] = rnd.randint(interval[0], interval[1])
            elif self.types[par] is float:
                x_grid[par] = rnd.uniform(interval[0], interval[1])
            elif self.types[par] is list:
                x_grid[par] = []
                for el in interval:
                    if (type(el) is int):
                        x_grid[par].append(el)
                    elif type(el) is tuple:
                        x_grid[par].append(rnd.randint(el[0], el[1]))
            elif self.types[par] == 'constant':
                x_grid[par] = interval

        self.n += 1
        if self.n == self.size+1:
            self.n = 0
            # set random seed at exit
            rnd.seed()
            raise StopIteration
        else:
            return x_grid

    def set_uniform_grid(self):

        # generate grid vectors
        par_vectors = dict()
        for par, interval in self.param_ranges.items():
            if self.types[par] is int:
                par_vectors[par] = np.linspace(interval[0],
                                               interval[1],
                                               self.vec_size, dtype=int)
            elif self.types[par] is float:
                par_vectors[par] = np.linspace(interval[0],
                                               interval[1],
                                               self.vec_size, dtype=float)
            elif self.types[par] is list:
                # list parameters must be flatten
                for i, el in enumerate(interval):
                    if type(el) is int:
                        par_vectors[par+str(i)] = [el]
                    elif type(el) is tuple:
                        if type(el[0]) is int:
                            par_vectors[par+str(i)] = (
                                np.linspace(el[0],
                                            el[1],
                                            self.vec_size, dtype=int))
                        elif type(el[0]) is float:
                            par_vectors[par+str(i)] = (
                                np.linspace(el[0],
                                            el[1],
                                            self.vec_size, dtype=float))
            elif self.types[par] == 'constant':
                par_vectors[par] = [interval]

        # cartesian product
        self.grid_iter = (product(*par_vectors.values()))

        # store dictionary for indexing the grid
        self.flat_params_indexes = dict()
        for i, el in enumerate(par_vectors):
            self.flat_params_indexes[el] = i

    def next_uniform(self):
        """
        Iterator next method,
        returns the next grid record

        Parameters
        ----------
        Returns
        -------
        d : dict
        Next grid record
        """
        record = self.grid_iter.next()

        d = dict()
        for i, par in enumerate(self.param_ranges):
            if self.types[par] is list:
                # merging list type params
                d[par] = []
                for i in range(len(self.param_ranges[par])):
                    d[par].append(record[self.flat_params_indexes[par+str(i)]])
            else:
                d[par] = record[self.flat_params_indexes[par]]

        return d

    def reset(self):
        """
        Reset the grid, to use again the iterator.

        Parameters
        ----------

        Returns
        -------
        """
        if self.random:
            rnd.seed(self.seed)
            self.n = 0
        else:
            self.set_uniform_grid()

    def get_par_index(self, index):
        self.reset()
        for i in range(index+1):
            params = self.next()
        return params

    def __len__(self):
        """
        Returns the grid length

        Parameters
        ----------

        Returns
        -------
        The grid's length.
        """
        if self.random:
            return self.size
        else:
            grid_dims = len(self.flat_params_indexes.keys())
            n_const = 0
            for k, v in self.types.items():
                if v == 'constant':
                    n_const += 1
            return self.size**(grid_dims-n_const)

    def get_as_dict(self):
        """
        Returns the grid as a dict

        Parameters
        ----------

        Returns
        -------
        The grid as a dict.
        """
        self.reset()
        grid_dict = {par: [] for par in self.param_ranges.keys()}

        for record in self:
            for par, values in record.items():
                grid_dict[par].append(
                    values)

        return grid_dict
